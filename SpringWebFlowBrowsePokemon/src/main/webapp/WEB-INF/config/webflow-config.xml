<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:webflow="http://www.springframework.org/schema/webflow-config"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.3.xsd">

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- Just for controllers?  This doesn't seem to work for Spring Web Flow views? -->
	<!-- Adding Spring MVC to the dependencies didn't work - flow still looking for views in flows/flow1 -->
	<!-- "By convention, a view-state maps its id to a view template in the directory where the flow is located" -->
	<!-- http://docs.spring.io/spring-webflow/docs/2.0.x/reference/htmlsingle/spring-webflow-reference.html#view-convention -->
	<!-- So, yeah, web flows ignores this -->
	<!-- But see http://docs.spring.io/spring-webflow/docs/2.0.x/reference/htmlsingle/spring-webflow-reference.html#spring-mvc-config-spring-view-resolution -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jspx" />
	</bean>
	
	<!--Register the web flows of the web application.
	We can do this either by:
    1. Listing individual flow files using the <flow-location> element.
	Example: <webflow:flow-location path="/WEB-INF/flows/my-webflow.xml"/>
	2. Register a set of flows matching a pattern we supply using the
	<webflow:flow-location-pattern> element.
	Below, a flow-location-pattern is specified that encourages one
	separate directories for each flow definition. The ids of the flows
	in the web application are affected if a
	base-path is specified for the flow registry.
	The id of a flow will be the remaining path and file name of the
	flow definition file after the base path, minus the file extension.
	It is also possible to have multiple flow registries in one
	web application.-->

	<webflow:flow-registry id="flowRegistry"
		base-path="/WEB-INF/flows" flow-builder-services="flowBuilderServices">
		<webflow:flow-location-pattern value="**/*-webflow.xml" />
	</webflow:flow-registry>

	<!-- See http://docs.spring.io/spring-webflow/docs/2.0.x/reference/htmlsingle/spring-webflow-reference.html#spring-mvc-config-spring-view-resolution -->
	<!-- Use Spring MVC view resolution, instead of just defaulting to the flow directory -->

	<webflow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator"/>

	<bean id="mvcViewFactoryCreator"
		class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
		<property name="viewResolvers" ref="internalResourceViewResolver" />
	</bean>

	<!--The flow executor is responsible for executing flows.
	Listeners that observe the lifecycle of flow executions can be
	registered with the flow executor, for instance:
	1. A listener that manages persistence contexts for flows that
	requires such.
	2. A listener that enables use of Spring Security with Spring
	Web Flow. Listeners can be configured to be applied to
	certain flows.-->
	<webflow:flow-executor id="flowExecutor" flow-registry="flowRegistry"></webflow:flow-executor>

	<!--Adapter enabling Spring Web Flow to run as a controller within
	the front controller. Handles all requests to flows.
	The bean name is used to determine which requests are mapped
	to the controller.
	The flowExecutor property determines which service is used to execute flows.-->
	<bean name="/*" class="org.springframework.webflow.mvc.servlet.FlowController">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>


</beans>